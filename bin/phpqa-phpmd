#!/usr/bin/env php
<?php

$loaded = false;

foreach (array(__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        require $file;
        $loaded = true;
        break;
    }
}

if (!$loaded) {
    die(
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

use PHPMD\PHPMD;
use PHPMD\RuleSetFactory;
use PDepend\Input\CompositeFilter;
use PDepend\Input\ExcludePathFilter;
use PDepend\Input\ExtensionFilter;

$ruleSetFactory = new RuleSetFactory();
$inputPath = $argv[1];

$phpmd = new PHPMD();
$phpmd->setIgnorePattern($ruleSetFactory->getIgnorePattern($argv[2]));

$fileFilter = new CompositeFilter();

if (count($phpmd->getIgnorePattern()) > 0) {
    $fileFilter->append(
        new ExcludePathFilter($phpmd->getIgnorePattern())
    );
}

if (count($phpmd->getFileExtensions()) > 0) {
    $fileFilter->append(
        new ExtensionFilter($phpmd->getFileExtensions())
    );
}

$fileIterator = new \AppendIterator();

foreach (explode(',', $inputPath) as $directory) {
    $fileIterator->append(
        new \PDepend\Input\Iterator(
            new \RecursiveIteratorIterator(
                new \RecursiveDirectoryIterator($directory . '/')
            ),
            $fileFilter,
            $directory
        )
    );
}

foreach ($fileIterator as $file) {
    if (!$file->isFile()) {
        continue;
    }

    echo '$(LOGSDIR)/pmd.xml phpmd.mk : $(LOGSDIR)/phpmd/', $file->getPathname(), '.xml', "\n";
}
